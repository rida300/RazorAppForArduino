@page
@model CreateGraph
@{
    ViewData["Title"] = "Home page";
}

<input asp-for="Element" name="Element" type="hidden" id="someShit"  />
@{ 
    var updatedValue = "dick";

}

<script src="~/js/Chart.bundle.min.js"></script>
<script src="~/js/Chart.min.js"></script>
<script src="~/lib/react-chartjs/react-chartjs.min.js"></script>
<script src="~/js/chartjs-plugin-drag.js"></script>

<div class="text-center">
    <h1 class="display-4">Invoice List</h1>
</div>


<div class="container">
    <canvas id="invChart" width="500" height="300"></canvas>
</div>

<script>
    /////////
    var myAmounts = [];
    var myCategories = [];
    var myX = [];
    var myY = [];
    var myInvoices;
    function showChart() {
        myAmounts = myInvoices.AmountList;
        myCategories = myInvoices.CategoryList;
        console.log(myAmounts);
        console.log(myCategories);

        Chart.pluginService.register({
            beforeDraw: function (chart, easing) {
                if (
                    chart.config.options.chartArea &&
                    chart.config.options.chartArea.backgroundColor
                ) {
                    var helpers = Chart.helpers;
                    var ctx = chart.chart.ctx;
                    var chartArea = chart.chartArea;

                    ctx.save();
                    ctx.fillStyle = chart.config.options.chartArea.backgroundColor;
                    ctx.fillRect(
                        chartArea.left,
                        chartArea.top,
                        chartArea.right - chartArea.left,
                        chartArea.bottom - chartArea.top
                    );
                    ctx.restore();
                }
            },
        });



        let popCanvasName = document.getElementById("invChart");
        let barChartName = new Chart(popCanvasName, {
            type: 'line',
            data: {
                labels: ["aa", "bb", "cc", "dd", "ee"],
                datasets: [{
                    label: 'Dome Pressure (psi)',
                    data: ["4", "6", "10", "14", "20", "20", "20"],
                    borderWidth: "1",
                    //borderDash: "[5,5]",
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.6)',
                        'rgba(54, 162, 235, 0.6)',
                        'rgba(255, 206, 86, 0.6)',
                        'rgba(75, 192, 192, 0.6)',
                        'rgba(153, 102, 255, 0.6)',
                    ],

                    pointBackgroundColor: "#531A15",
                    pointRadius: 4,
                    pointHoverRadius: 4,
                    pointBorderColor: "#531A15",
                    pointHoverBackgroundColor: "black",
                    pointHoverBorderColor: "#55bae7",
                }]
            },
            options: {
                responsive: false,
                chartArea: {
                    backgroundColor: "#9D8F9C",
                },
                scales: {
                    yAxes: [{

                        scaleLabel: {
                            display: true,
                            labelString: "Dome Pressure (psig)",
                            fontSize: 18,
                            fontColor: "#531A15",
                            beginAtZero: true,
                        },
                        ticks: {
                            beginAtZero: true,

                            fontSize: 12,
                            fontColor: "#531A15",

                        }
                    }],

                    xAxes: [
                        {
                            scaleLabel: {
                                display: true,
                                labelString: "Time (seconds)",
                                fontSize: 18,
                                fontColor: "#531A15",
                                beginAtZero: true,
                            },
                            ticks: {
                                reverse: false,
                                fontSize: 12,
                                fontColor: "#531A15",
                            },
                        },
                    ],

                },
                dragData: true

            }
        });


        var ctx = document.getelementbyid("invchart").getcontext("1d");
        var chartinstance = new chart(ctx, options);

        @*d3.select(chartinstance.chart.canvas).call(
            d3
                .drag()
                .container(chartinstance.chart.canvas)
                .on("start", getelement)
                .on("drag", updatedata)
                .on("end", sendElementToModel)
        );

        var element, scale, datasetindex, index, value;

        function getelement() {
            var e = d3.event.sourceevent;
            element = chartinstance.getelementatevent(e)[0];
            if (element) scale = element._yscale.id;
            @updatedValue = element;
            document.getElementById("someShit").value = element;
            console.log("In getElement");
            document
                .getElementById("GetButton")
                .addEventListener("click", function () {
                    document.getElementById("displayZoomType").innerHTML = element;
                });
        }

        function sendElementToModel() {
            console.log("In end method");
            document
                .getElementById("GetButton")
                .addEventListener("click", function () {
                    document.getElementById("displayZoomType").innerHTML = element;
                });
            $.ajax({
                url: "?handler=ProcessData",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ person: element }),
                success: function (response) {
                    response ? console.log("It shouldve worked") : alert("It didn't work.");
                }
            }).done();

        }

        function updatedata() {
            console.log("In update method");
            var e = d3.event.sourceevent;
            if (element) {
                datasetindex = element._datasetindex;
                index = element._index;
            }
            if (chartinstance.scales[scale])
                value = chartinstance.scales[scale].getvalueforpixel(e.clienty);
            if (chartinstance.data.datasets[datasetindex])
                chartinstance.data.datasets[datasetindex].data[index] = value;
            chartinstance.update(0);


        }*@

    }


    function getChartData() {
        return fetch('./CreateGraph?handler=InvoiceChartData',
            {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json;charset=UTF-8'
                }
            })

            .then(function (responseJSON) {
                myInvoices = responseJSON;
                showChart();
            })
    }
    getChartData();

</script>


    @{Model.Element = updatedValue;
    }

<form method="post">
    <div class="form-check">
        <button id="GetButton" type="submit" class="btn btn-primary" asp-page-handler="ShowReading">Send</button>
    </div>
</form>
<span id="displayZoomType"></span>

@*<script>

    $("#buttonId").on("click", function (e) {
        e.preventDefault();
        return false;
    });

    </script>*@